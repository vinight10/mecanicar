import streamlit as st
import pandas as pd
import sqlite3 
from db_funcs import *
from PIL import Image
import time
import os
import shutil

DB_PATH = "mecanicar/database.db"
BACKUP_PATH = "mecanicar/database_backup.db"

# Fun√ß√£o para verificar se o banco de dados j√° existe
def database_exists(db_path):
    return os.path.exists(db_path)

# Fun√ß√£o para criar o banco de dados, se necess√°rio
def create_database(db_path):
    if not database_exists(db_path):
        conn = sqlite3.connect(db_path)
        create_table()
        conn.close()

# Fun√ß√£o para fazer backup do banco de dados
def backup_database(db_path, backup_path):
    shutil.copy(db_path, backup_path)

# Fun√ß√£o para restaurar o banco de dados a partir do backup
def restore_database(db_path, backup_path):
    shutil.copy(backup_path, db_path)

# Fazer backup do banco de dados antes de qualquer altera√ß√£o
backup_database(DB_PATH, BACKUP_PATH)

# Criar o banco de dados, se necess√°rio
create_database(DB_PATH)

# Definindo as propriedades do DataFrame
pd.set_option('display.max_rows', None)  # Exibir todas as linhas
pd.set_option('display.max_columns', None)  # Exibir todas as colunas
pd.set_option('display.width', 50)  # Largura da tela (para evitar que as colunas sejam truncadas)
pd.set_option('display.expand_frame_repr', True)  # Evitar que as colunas sejam truncadas
pd.set_option('max_colwidth', 20)  # Largura m√°xima da coluna (para evitar truncamento do conte√∫do)

# Fun√ß√£o para aplicar cores ao DataFrame
def color_df(val):
    color_map = {
        "Na fila": "purple",
        "Or√ßamento": "orange",
        "Aguardando Pe√ßas": "red",
        "Em servi√ßo": "blue",
        "Pronto para retirada": "green"
    }
    color = color_map.get(val, "lightblue")
    return f'background-color: {color}; color: white; font-size: 50px;'

st.set_page_config(
    page_title="Gest√£o de P√°tio de Oficina",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üõ†Ô∏è Gest√£o de P√°tio de Oficina üöó")

st.sidebar.image("mecanicar/marca-nova.jpg")
st.sidebar.title("Menu")

choice = st.sidebar.radio("", ["Visualizar Todos os Ve√≠culos üìù","Adicionar Ve√≠culo üöô","Visualizar Ve√≠culos por Status üìä","Visualizar por Consultor üë®‚Äçüîß", "Visualizar por Mec√¢nico üîß"])

status_options = ["Na fila", "Or√ßamento", "Aguardando Pe√ßas", "Em servi√ßo", "Pronto para retirada"]

if choice == "Adicionar Ve√≠culo üöô":
    st.subheader("Adicionar Ve√≠culo")
    col1, col2, col3 = st.columns(3)

    with col1:
        vehicle = st.text_input("Ve√≠culo")

    with col2:
        consultant = st.selectbox("Consultor Respons√°vel", ["Rafael", "Rudimar", "Samuel", "J√©ssica", "Paulo"])

    with col3:
        mechanic = st.selectbox("Mec√¢nico Respons√°vel", ["Vini", "Valdo", "Danilo", "Fosco", "Szczhoca", "Weslei"])

    status = st.selectbox("Status", status_options)

    if st.button("Adicionar Ve√≠culo"):
        add_vehicle(vehicle, consultant, mechanic, status)
        st.success(f"Ve√≠culo \"{vehicle}\" adicionado com sucesso! üöÄ")
        st.session_state['update'] = True

elif choice == "Visualizar Ve√≠culos por Status üìä":
    st.subheader("Visualizar Ve√≠culos por Status")

    status_filter = st.selectbox("Selecione um Status", status_options)
    filtered_data = get_data_by_status(status_filter)

    if filtered_data:
        df_filtered = pd.DataFrame(filtered_data, columns=["Ve√≠culo", "Consultor", "Mec√¢nico", "Status"]).reset_index(drop=True)
        df_styled = df_filtered.style.applymap(color_df, subset=["Status"]).set_table_styles(
            [{'selector': 'td', 'props': [('font-size', '40px')]}]
        )
        st.markdown(df_styled.to_html(), unsafe_allow_html=True)
       
    else:
        st.info("Nenhum ve√≠culo encontrado com o status selecionado.")        

elif choice == "Visualizar Todos os Ve√≠culos üìù":
    st.subheader("Visualizar Todos os Ve√≠culos")

    all_data = view_all_data()

    if all_data:
        df_all = pd.DataFrame(all_data, columns=["Ve√≠culo", "Consultor", "Mec√¢nico", "Status"]).reset_index(drop=True)
        
        # Adicionando op√ß√µes para modificar o consultor e o mec√¢nico
        selected_vehicle = st.selectbox("Selecione um Ve√≠culo", df_all["Ve√≠culo"].unique())
        current_row = df_all[df_all["Ve√≠culo"] == selected_vehicle].iloc[0]  # Obt√©m a linha correspondente ao ve√≠culo selecionado
        current_status = current_row["Status"]
        current_consultant = current_row["Consultor"]
        current_mechanic = current_row["Mec√¢nico"]

        # Define o valor padr√£o dos selectbox para ser o consultor e o mec√¢nico atuais
        new_consultant = st.selectbox("Selecione um Novo Consultor", ["Paulo", "J√©ssica", "Samuel", "Rafael", "Rudimar"], index=["Paulo", "J√©ssica", "Samuel", "Rafael", "Rudimar"].index(current_consultant))
        new_mechanic = st.selectbox("Selecione um Novo Mec√¢nico", ["Vini", "Valdo", "Danilo", "Fosco", "Szczhoca", "Weslei"], index=["Vini", "Valdo", "Danilo", "Fosco", "Szczhoca", "Weslei"].index(current_mechanic))
        new_status = st.selectbox("Selecione um Novo Status", status_options, index=status_options.index(current_status))

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("Atualizar Consultor, Mec√¢nico e Status"):
                update_vehicle_consultant_mechanic_status(selected_vehicle, new_consultant, new_mechanic, new_status)
                time.sleep(0.5)
                st.rerun()
                st.success(f"Consultor, Mec√¢nico e Status do ve√≠culo \"{selected_vehicle}\" atualizados com sucesso! üöÄ")
                st.session_state['update'] = True
                

        with col3:
            delete_button = st.button(f"Excluir {selected_vehicle}")
            if delete_button:
                delete_data(selected_vehicle)
                time.sleep(0.5)
                st.rerun()
                st.success(f"Ve√≠culo \"{selected_vehicle}\" deletado com sucesso! üöó")
                st.session_state['update'] = True
                

        # Renderiza o DataFrame com a coluna de bot√µes
        df_styled = df_all.style.applymap(color_df, subset=["Status"]).set_table_styles(
            [{'selector': 'td', 'props': [('font-size', '50px')]}]
        )
        st.dataframe(df_styled, use_container_width=True)

    else:
        st.info("Nenhum ve√≠culo encontrado.")

elif choice == "Visualizar por Consultor üë®‚Äçüîß":
    st.subheader("Visualizar Ve√≠culos por Consultor")
    consultant = st.selectbox("Selecione um Consultor", ["Paulo", "J√©ssica", "Samuel", "Rafael", "Rudimar"])
    data = get_data_by_consultant(consultant)
    if data:
        df = pd.DataFrame(data, columns=["Ve√≠culo", "Consultor", "Mec√¢nico", "Status"])
        df_styled = df.style.applymap(color_df, subset=["Status"]).set_table_styles(
            [{'selector': 'td', 'props': [('font-size', '50px')]}]
        )
        st.dataframe(df_styled, use_container_width=True)
    else:
        st.info("Nenhum ve√≠culo encontrado para este consultor.")

elif choice == "Visualizar por Mec√¢nico üîß":
    st.subheader("Visualizar Ve√≠culos por Mec√¢nico")
    mechanic = st.selectbox("Selecione um Mec√¢nico", ["Vini", "Valdo", "Danilo", "Fosco", "Szczhoca", "Weslei"])
    data = get_data_by_mechanic(mechanic)
    if data:
        df = pd.DataFrame(data, columns=["Ve√≠culo", "Consultor", "Mec√¢nico", "Status"])
        df_styled = df.style.applymap(color_df, subset=["Status"]).set_table_styles(
            [{'selector': 'td', 'props': [('font-size', '50px')]}]
        )
        st.dataframe(df_styled, use_container_width=True)
    else:
        st.info("Nenhum ve√≠culo encontrado para este mec√¢nico.")

st.markdown("<br><hr><center>Desenvolvido por Vinight </center><hr>", unsafe_allow_html=True)

# For√ßar a atualiza√ß√£o da p√°gina se houver uma mudan√ßa de estado
if 'update' in st.session_state:
    time.sleep(0.5)
    del st.session_state['update']
    st.rerun()
